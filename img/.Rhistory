if ((t < t1) | (t < t2)){
dGFP = (basal_leaky + GFP_Production*K_ID*I^2)/(1 + K_ID*I^2 + K_MD*M^2) - deg_GFP*GFP #NEON green/GFP
}
else{
dGFP = (basal_leaky + GFP_Production*K_ID*lagvalue(t -t1,1)^2)/(1 + K_ID*lagvalue(t -t1,1)^2 + K_MD*lagvalue(t -t2,2)^2) - deg_GFP*GFP #NEON green/GFP
}
dI = basal - association_IAA*(IAA*I^2/(1+I^2)) - deg*I # iacR Monomers
dM = basal- association_SA*(SA*M^2/(1+M^2))- deg*M # MarR Monomers
dSA = 0
dIAA = 0
return(list(c(dI,dM, dGFP, dIAA, dSA)))
})
}
##-----------------------------
## initial values and times
##-----------------------------
yinit = c(I = 0,
M = 0,
GFP = 0,
IAA = 0,
SA = 0)
parms0 = c(basal = 4,
deg = 0.5,
association_SA = 10000,
association_IAA = 100,
basal_leaky = 0.01,
GFP_Production = 10,
K_ID = 1,
K_MD = 10,
deg_GFP = 2,
t1 = 0.0001,
t2 = 0.0001)
iterations = 3000
dt = 1
times = seq(0, iterations, by = dt)
# ---------------- Event SQUARE WAVE -------------------
concentration_SA = 1
concentration_IAA = 1
# 5 hours  square wave
# SA = rep(rep(c(concentration_SA,0), each = 150), times = 10)
# IAA  = rep(rep(c(0,concentration_IAA), each = 150), times = 10)
# 10 hours  square wave
SA = rep(rep(c(concentration_SA,0), each = 300), times = 5)
IAA  = rep(rep(c(0,concentration_IAA), each = 300), times = 5)
#
eventdat = data.frame(var = c(rep("SA", iterations), rep("IAA", iterations)),
time = c(1:iterations, 1:iterations),
value = c(SA, IAA),
method = rep("rep", iterations*2))
summary(eventdat)
##-----------------------------
## solve the model
##-----------------------------
yout = dede(y = yinit, times = times, func = derivs, parms = parms0,
events = list(data = eventdat))
##-----------------------------
## display, plot results
##-----------------------------
plot(yout, type = "l", lwd = 2)
results = data.frame(yout)
results_SG = data.frame()
results$I = results$I/max(results$I)
results$M = results$M/max(results$M)
results$GFP = results$GFP/max(results$GFP)
results = gather(results, key = "variable", value = "value", -time)
chart = ggplot(results, aes(x = time, y = value, color = variable))+
geom_line(size = 1)+
theme_classic() +
ggtitle('LG1005 model')+
xlab('Time (hours)')+
ylab('Number of molecules')+
labs(color = "Molecules")+
theme(legend.position = "bottom")
chart
# ff2a2aff 00aad4ff 37c837ff
data = subset(results, variable != "SA" & variable != "IAA")
chart2 = ggplot(data, aes(x = time/60, y = value, color = variable))+
geom_line(size = 1)+
theme_classic() +
ggtitle('LG1005 model')+
xlab('Time (h)')+
ylab('Protein (a.u)')+
labs(color = "Molecules")+
theme(legend.position = "bottom")+
scale_color_manual(values = c("#37c837ff", "#00aad4ff", "#ff2a2aff"), labels = c("dEGFP", "iacR", "MarR"))
chart2
gfp = subset(data, variable == "GFP")
chart3 = ggplot(gfp, aes(x = time/60, y = value, color = variable))+
geom_line(size = 1)+
theme_classic() +
ggtitle('LG1005 model')+
xlab('Time (h)')+
ylab('Protein (a.u)')+
labs(color = "Molecules")+
theme(legend.position = "bottom")+
scale_color_manual(values = c("#37c837ff", "#00aad4ff", "#ff2a2aff"), labels = c("dEGFP", "iacR", "MarR"))
chart3
citation()
citation("pheatmap")
a = c(1,2)
b = c(3,4)
c = a<b
c
install.packages("tibble")
install.packages("tibble")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
file.edit(file.path("~", ".Rprofile"))
shiny::runApp('C:/Users/sarap/Shiny/96Analyzer')
shinyApp(ui = ui, server = server)
runApp('C:/Users/sarap/Desktop/shiny/prueba.R')
runApp('C:/Users/sarap/Desktop/shiny/prueba.R')
?faithful
runApp('C:/Users/sarap/Shiny/96Analyzer')
runApp('C:/Users/sarap/Desktop/shiny/prueba.R')
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choose CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv")
),
tags$hr(),
checkboxInput("header", "Header", TRUE)
),
mainPanel(
tableOutput("contents")
)
)
)
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choose CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv")
),
tags$hr(),
checkboxInput("header", "Header", TRUE)
),
mainPanel(
tableOutput("contents")
)
)
)
server <- function(input, output) {
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, it will be a data frame with 'name',
# 'size', 'type', and 'datapath' columns. The 'datapath'
# column will contain the local filenames where the data can
# be found.
inFile <- input$file1
if (is.null(inFile))
return(NULL)
read.csv(inFile$datapath, header = input$header)
})
}
shinyApp(ui, server)
}
runApp('C:/Users/sarap/Shiny/96Analyzer')
runApp('C:/Users/sarap/Shiny/96Analyzer')
runApp('C:/Users/sarap/Shiny/96Analyzer')
runApp('C:/Users/sarap/Shiny/96Analyzer')
runApp('C:/Users/sarap/Shiny/96Analyzer')
runApp('C:/Users/sarap/Shiny/96Analyzer')
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choose CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv")
),
tags$hr(),
checkboxInput("header", "Header", TRUE)
),
mainPanel(
tableOutput("contents")
)
)
)
server <- function(input, output) {
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, it will be a data frame with 'name',
# 'size', 'type', and 'datapath' columns. The 'datapath'
# column will contain the local filenames where the data can
# be found.
inFile <- input$file1
if (is.null(inFile))
return(NULL)
read.csv(inFile$datapath, header = input$header)
})
}
shinyApp(ui, server)
}
library(readxl)
library(tidyverse)
library(gridExtra)
install.packages("ggpmisc")
install.packages("ggpmisc")
library(ggpmisc)
library(ggplot2)
my_df = data.frame(mean = c(1,2,3,4,5,6,7,9,10,40,38,20,10,3,21,1),
strain = c("marR","marR","marR","marR","marR","marR","marR","marR",
"ohrR","ohrR","ohrR","ohrR","ohrR","ohrR","ohrR","ohrR"),
condition = c(1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1),
t = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16))
ggplot(my_df,aes(x = condition, y = strain))+
geom_tile(aes(fill = mean))+geom_text(aes(label=mean), color = "white")+stat_peaks()
shiny::runApp('C:/Users/sarap/Shiny/96Analyzer')
shiny::runApp('C:/Users/sarap/Shiny/96Analyzer')
library(shiny); runApp('C:/Users/sarap/Shiny/Learning/FuckinPutaClave.R')
library(shiny)
library(shiny)
library(shinyjqui)
ui <- fluidPage(
tabsetPanel(
tabPanel("Options",
sidebarLayout(
h3("Select your plate layout")
),
mainPanel(
selectableTableOutput("tbl", selection_mode = "cell"),
verbatimTextOutput("selected")
)
),
tabPanel("Plots","contents")
)
)
server <- function(input, output) {
generate96plate = function(){
rows = c("A","B","C","D","F","G","H","I","J")
cols = seq(1,12)
my96plate = data.frame()
for (i in 1:length(rows)){
for (j in 1:length(cols)){
my96plate[i,j]=paste(rows[i], cols[j], sep = "")
}
}
row.names(my96plate) = rows
colnames(my96plate) = cols
return(my96plate)
}
output$selected <- renderPrint({
cat("Selected:\n")
input$tbl_selected
})
output$tbl <- renderTable(generate96plate())
}
shinyApp(ui, server)
runApp('C:/Users/sarap/Shiny/Learning/FuckinPutaClave.R')
runApp('C:/Users/sarap/Shiny/Learning/FuckinPutaClave.R')
runApp('C:/Users/sarap/Shiny/Learning/FuckinPutaClave.R')
runApp('C:/Users/sarap/Shiny/Learning/FuckinPutaClave.R')
## Only run this example in interactive R sessions
if (interactive()) {
shinyApp(
ui = fluidPage(
sortableCheckboxGroupInput("foo", "SortableCheckboxGroupInput",
sortableRadioButtons 15
choices = month.abb),
verbatimTextOutput("order")
),
server = function(input, output) {
output$order <- renderPrint({input$foo_order})
}
)
}
output$order <- renderPrint({input$foo_order})
shinyApp(
ui = fluidPage(
sortableCheckboxGroupInput("foo", "SortableCheckboxGroupInput",
choices = month.abb),
verbatimTextOutput("order")
),
server = function(input, output) {
output$order <- renderPrint({input$foo_order})
}
)
runApp('C:/Users/sarap/Shiny/Learning/FuckinPutaClave2.R')
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
actionButton("go", "Go"),
numericInput("n", "n", 50),
plotOutput("plot")
)
server <- function(input, output) {
randomVals <- eventReactive(input$go, {
runif(input$n)
})
output$plot <- renderPlot({
hist(randomVals())
})
}
shinyApp(ui, server)
runApp('C:/Users/sarap/Shiny/Learning/FuckinPutaClave2.R')
install.packages("shinytheme")
install.packages("shinythemes")
runApp('C:/Users/sarap/Shiny/Learning/FuckinPutaClave2.R')
runApp('C:/Users/sarap/Shiny/Learning/FuckinPutaClave2.R')
runApp('C:/Users/sarap/Shiny/Learning/FuckinPutaClave2.R')
library(tidyverse)
runApp('FuckinPutaClave2.R')
runApp('C:/Users/sarap/Shiny/Learning/FuckinPutaClave2.R')
runApp('C:/Users/sarap/Shiny/Learning/FuckinPutaClave2.R')
runApp('C:/Users/sarap/Shiny/Learning/FuckinPutaClave2.R')
runApp('C:/Users/sarap/Shiny/Learning/FuckinPutaClave2.R')
runApp('C:/Users/sarap/Shiny/Learning/FuckinPutaClave2.R')
generate96plate = function(rows, cols){
# rows = c("A","B","C","D","F","G","H","I","J")
# cols = seq(1,12)
my96plate = data.frame()
for (i in 1:length(rows)){
for (j in 1:length(cols)){
my96plate[i,j]=paste(rows[i], cols[j], sep = "")
}
}
row.names(my96plate) = rows
colnames(my96plate) = cols
return(my96plate)
}
ggplot(table96, aes(rows, cols)) + geom_tile()
generate96plate = function(rows, cols){
# rows = c("A","B","C","D","F","G","H","I","J")
# cols = seq(1,12)
my96plate = data.frame()
for (i in 1:length(rows)){
for (j in 1:length(cols)){
my96plate[i,j]=paste(rows[i], cols[j], sep = "")
}
}
row.names(my96plate) = rows
colnames(my96plate) = cols
return(my96plate)
}
ggplot(table96, aes(rows, cols)) + geom_tile()
generate96plate = function(rows, cols){
# rows = c("A","B","C","D","F","G","H","I","J")
# cols = seq(1,12)
my96plate = data.frame()
for (i in 1:length(rows)){
for (j in 1:length(cols)){
my96plate[i,j]=paste(rows[i], cols[j], sep = "")
}
}
row.names(my96plate) = rows
colnames(my96plate) = cols
return(my96plate)
}
rows = c("A","B","C","D","F","G","H","I","J")
cols = seq(1,12)
table96 = generate96plate(rows, cols)
ggplot(table96, aes(rows, cols)) + geom_tile()
length)rows
length(rows)
length(cols)
View(table96)
ggplot(table96) + geom_tile()
plot(table96)
table96 = table06 %>% gather()
table96 = table96 %>% gather()
ggplot(table96) + geom_tile()
View(table96)
table96 = table96 %>% gather(key = cols, value = wells, -rows)
rows = c("A","B","C","D","F","G","H","I","J")
cols = seq(1,12)
table96 = generate96plate(rows, cols)
table96$rows = rows
table96 = table96 %>% gather(key = cols, value = wells, -rows)
ggplot(table96) + geom_tile()
ggplot(table96, aes(rows,cols)) + geom_tile()
ggplot(table96, aes(rows,cols, fill = wells)) + geom_tile()
runApp('C:/Users/sarap/Shiny/Learning/FuckinPutaClave2.R')
runApp('FuckinPutaClave2.R')
runApp('C:/Users/sarap/Shiny/Learning/FuckinPutaClave2.R')
rowsN = seq(1,9)
table96L$rows = factor(table96L$rows)
runApp('C:/Users/sarap/Shiny/Learning/FuckinPutaClave2.R')
runApp('C:/Users/sarap/Shiny/Learning/FuckinPutaClave2.R')
runApp('C:/Users/sarap/Shiny/Learning/FuckinPutaClave2.R')
runApp('C:/Users/sarap/Shiny/Learning/FuckinPutaClave2.R')
runApp('FuckinPutaClave2.R')
runApp('C:/Users/sarap/Shiny/Learning/FuckinPutaClave2.R')
View(table96L)
generate96plate = function(rows, cols){
# rows = c("A","B","C","D","F","G","H","I","J")
# cols = seq(1,12)
my96plate = data.frame()
for (i in 1:length(rows)){
for (j in 1:length(cols)){
my96plate[i,j]=paste(rows[i], cols[j], sep = "")
}
}
row.names(my96plate) = rows
colnames(my96plate) = cols
return(my96plate)
}
rows = c("A","B","C","D","F","G","H","I","J")
rowsN = seq(1,9)
cols = seq(1,12)
width = 400
heigth = 300
table96 = generate96plate(rows, cols)
output$tbl <- renderTable(table96)
table96L = table96
table96L$rows = rowsN
table96L = table96L %>% gather(key = cols, value = wells, -rows)
table96L$rows = factor(table96L$rows, levels = rowsN)
table96L$cols = factor(table96L$cols, levels = cols)
View(table96L)
rows = c("A","B","C","D","F","G","H","I","J")
rowsN = seq(1,9)
cols = seq(1,12)
width = 400
heigth = 300
table96 = generate96plate(rows, cols)
output$tbl <- renderTable(table96)
table96L = table96
table96L$rows = rowsN
table96L = table96L %>% gather(key = cols, value = NA, -rows)
table96L$rows = factor(table96L$rows, levels = rowsN)
table96L$cols = factor(table96L$cols, levels = cols)
table96L$well = paste(table96L$rows, table96L$cols)
runApp('C:/Users/sarap/Shiny/Learning/FuckinPutaClave2.R')
runApp('C:/Users/sarap/Shiny/Learning/FuckinPutaClave2.R')
try = paste(rows,rowsN, sep = ".")
try
View(table96L)
table96L = table96L %>% gather(key = cols, value = NA, -rows)
table96L$rows = factor(table96L$rows, levels = rowsN)
table96L$cols = factor(table96L$cols, levels = cols)
table96L = table96L %>% gather(key = cols, value = wells, -rows)
table96L$rows = factor(table96L$rows, levels = rowsN)
table96L$cols = factor(table96L$cols, levels = cols)
runApp('C:/Users/sarap/Shiny/Learning/FuckinPutaClave2.R')
runApp('C:/Users/sarap/Shiny/Learning/FuckinPutaClave2.R')
library(shiny); runApp('C:/Users/sarap/Shiny/Learning/FuckinPutaClave.R')
runApp('C:/Users/sarap/Shiny/Learning/FuckinPutaClave2.R')
runApp('C:/Users/sarap/Shiny/Learning/FuckinPutaClave2.R')
library(shiny); runApp('C:/Users/sarap/Shiny/Learning/FuckinPutaClave2.R')
runApp('C:/Users/sarap/Shiny/96Analyzer')
runApp('C:/Users/sarap/Shiny/my96Analyzer')
install.packages("imager")
library(imager)
getwd()
dir.create("imageAnalyzer")
setwd("C:/Users/sarap/Github/")
dir.create("imageAnalyzer")
png("/tmp/test.png")
png("test.png")
plot(rnorm(100))
dev.off()
plot(rnorm(100))
png("test.png")
plot(rnorm(100))
dev.off()
setwd("C:/Users/sarap/Github/imageAnalyzer/")
install.packages("tiff")
library(tiff)
install.packages("raster")
library(raster)
raterTiff = as.raster(imageTiff)
imageTiff = readTIFF("img/Pos11/img_channel001_position011_time000000000_z000.tif")
imageTiff = readTIFF("img/Pos11/img_channel001_position011_time000000000_z000.tif")
setwd("C:/Users/sarap/Github/imageAnalyzer/img/Pos11/")
imageTiff = readTIFF("img_channel001_position011_time000000000_z000.tif")
imageTiff = tiff::readTIFF("img_channel001_position011_time000000000_z000.tif")
imageTiff = readTIFF("img_channel001_position011_time000000000_z000.tif"[1])
system.file()?
;
help("system.file")
imageTiff = readTIFF(system.file("img_channel001_position011_time000000000_z000.tif", package="tiff")
)
imageTiff = readTIFF(source = "img_channel001_position011_time000000000_z000.tif")
setwd("C:/Users/sarap/Github/imageAnalyzer/img/")
imageTiff = readTIFF(source = "Pos11", all = TRUE)[2]
imageTiff = readTIFF(source = "Pos11/img_channel001_position011_time000000000_z000.tif")
imageTiff = readTIFF(source = "Pos11/img_channel001_position011_time000000000_z000.tiff")
system.file("Pos11", "img_channel001_position011_time000000000_z000.tiff", package = "tiff")
system.file("Pos11", "img_channel001_position011_time000000000_z000.tiff")
system.file(img_channel001_position011_time000000000_z000.tiff")
:
;
)
P
s
pp
[[]]
ZZ
))))
)
()
quit
exit
